#!/bin/bash

# ==========================================
# üßπ DOCKER CLEANUP PRO v1.0
# ==========================================
# Script profissional para limpeza Docker
# Compat√≠vel com Docker & Portainer
# Suporte multi-plataforma: Linux, macOS, Windows
# Criado por: Matheus N√©voa
# Linkedin: https://www.linkedin.com/in/matheusnevoa/
# Github: https://github.com/matheusnevoa
# Atualizado em: Julho de 2025
# ==========================================

# Cores para output bonito
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Vari√°vel global para armazenar o OS
OS_TYPE=""

# Fun√ß√£o para detectar o sistema operacional
detect_os() {
    if [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]] || [[ "$OSTYPE" == "win32" ]] || [[ -n "$WINDIR" ]]; then
        OS_TYPE="windows"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS_TYPE="linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS_TYPE="macos"
    else
        OS_TYPE="unix"
    fi
}

# Fun√ß√£o para limpar tela de acordo com o OS
clear_screen() {
    if [[ "$OS_TYPE" == "windows" ]]; then
        cmd //c cls 2>/dev/null || clear
    else
        clear
    fi
}

# Fun√ß√£o para exibir banner
show_banner() {
    clear_screen
    echo -e "${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë              üê≥ DOCKER CLEANUP PRO             ‚ïë"
    echo "‚ïë                    v1.0                        ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    echo -e "${WHITE}üöÄ Script profissional para limpeza e otimiza√ß√£o Docker${NC}"
    echo -e "${WHITE}ü§ñ Criado por Matheus N√©voa - nevoaia.com // linkedin.com/in/matheusnevoa ${NC}"
    echo -e "${YELLOW}‚ö° Libere espa√ßo, remova containers √≥rf√£os e otimize performance${NC}"
    echo -e "${BLUE}üíª Sistema detectado: $OS_TYPE${NC}"
    echo ""
}

# Fun√ß√£o para mostrar espa√ßo em disco
show_disk_usage() {
    echo -e "${BLUE}üìä AN√ÅLISE ATUAL DO SISTEMA:${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # Espa√ßo Docker
    echo -e "${WHITE}üê≥ Uso do Docker:${NC}"
    docker system df 2>/dev/null || echo "Docker n√£o encontrado ou n√£o est√° rodando"
    
    echo ""
    # Espa√ßo do sistema
    echo -e "${WHITE}üíæ Espa√ßo em disco:${NC}"
    if [[ "$OS_TYPE" == "windows" ]]; then
        # Windows: usar wmic ou PowerShell para obter informa√ß√µes de disco
        if command -v powershell &> /dev/null; then
            powershell "Get-WmiObject -Class Win32_LogicalDisk -Filter \"DriveType=3\" | Select-Object Size,FreeSpace,DeviceID | ForEach-Object { \$used = \$_.Size - \$_.FreeSpace; \$percentUsed = [math]::Round((\$used / \$_.Size) * 100, 1); Write-Host \"Drive \$(\$_.DeviceID) - Usado: \$([math]::Round(\$used/1GB, 2))GB / \$([math]::Round(\$_.Size/1GB, 2))GB (\$percentUsed%)\" }" 2>/dev/null
        elif command -v wmic &> /dev/null; then
            wmic logicaldisk get size,freespace,caption | grep -E '^[A-Z]:' 2>/dev/null || echo "N√£o foi poss√≠vel obter informa√ß√µes de disco"
        else
            echo "PowerShell ou WMIC n√£o encontrados - usando informa√ß√µes b√°sicas"
            df -h . 2>/dev/null | tail -1 | awk '{print "Usado: " $3 " / " $2 " (" $5 ")"}' || echo "Informa√ß√µes de disco n√£o dispon√≠veis"
        fi
    else
        # Linux/macOS: usar df tradicional
        df -h / | tail -1 | awk '{print "Usado: " $3 " / " $2 " (" $5 ")"}'
    fi
    
    echo ""
}

# Fun√ß√£o para contar recursos
count_resources() {
    containers=$(docker ps -aq 2>/dev/null | wc -l)
    images=$(docker images -q 2>/dev/null | wc -l)
    volumes=$(docker volume ls -q 2>/dev/null | wc -l)
    networks=$(docker network ls -q 2>/dev/null | wc -l)
    
    echo -e "${WHITE}üìã RECURSOS DOCKER ENCONTRADOS:${NC}"
    echo "‚Ä¢ Containers: $containers"
    echo "‚Ä¢ Imagens: $images" 
    echo "‚Ä¢ Volumes: $volumes"
    echo "‚Ä¢ Redes: $networks"
    echo ""
}

# Fun√ß√£o para limpeza b√°sica
basic_cleanup() {
    echo -e "${GREEN}üßΩ Executando limpeza b√°sica...${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    echo "‚Ä¢ Removendo containers parados..."
    docker container prune -f
    
    echo "‚Ä¢ Removendo redes n√£o utilizadas..."
    docker network prune -f
    
    echo "‚Ä¢ Removendo imagens dangling..."
    docker image prune -f
    
    echo -e "${GREEN}‚úÖ Limpeza b√°sica conclu√≠da!${NC}"
    echo ""
}

# Fun√ß√£o para limpeza avan√ßada
advanced_cleanup() {
    echo -e "${YELLOW}üßº Executando limpeza avan√ßada...${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    echo "‚Ä¢ Removendo volumes √≥rf√£os..."
    docker volume prune -f
    
    echo "‚Ä¢ Removendo todas imagens n√£o utilizadas..."
    docker image prune -a -f
    
    echo "‚Ä¢ Limpando cache de build..."
    docker builder prune -f
    
    echo -e "${YELLOW}‚úÖ Limpeza avan√ßada conclu√≠da!${NC}"
    echo ""
}

# Fun√ß√£o para limpeza total
total_cleanup() {
    echo -e "${RED}üî• Executando limpeza TOTAL...${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo -e "${RED}‚ö†Ô∏è  ATEN√á√ÉO: Isto remove TUDO que n√£o est√° em uso!${NC}"
    
    read -p "Tem certeza? (s/N): " confirm
    if [[ $confirm =~ ^[Ss]$ ]]; then
        echo "‚Ä¢ Executando limpeza completa do sistema..."
        docker system prune -a --volumes -f
        echo -e "${RED}‚úÖ Limpeza total conclu√≠da!${NC}"
    else
        echo -e "${CYAN}‚ùå Limpeza total cancelada pelo usu√°rio${NC}"
    fi
    echo ""
}

# Fun√ß√£o para mostrar relat√≥rio final
show_final_report() {
    echo -e "${PURPLE}üìà RELAT√ìRIO FINAL:${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # Espa√ßo ap√≥s limpeza
    echo -e "${WHITE}üê≥ Uso do Docker ap√≥s limpeza:${NC}"
    docker system df 2>/dev/null || echo "Docker n√£o dispon√≠vel"
    
    echo ""
    # Recursos restantes
    count_resources
    
    # Espa√ßo em disco
    echo -e "${WHITE}üíæ Espa√ßo livre no sistema:${NC}"
    if [[ "$OS_TYPE" == "windows" ]]; then
        # Windows: usar PowerShell para informa√ß√µes de espa√ßo livre
        if command -v powershell &> /dev/null; then
            powershell "Get-WmiObject -Class Win32_LogicalDisk -Filter \"DriveType=3\" | Select-Object Size,FreeSpace,DeviceID | ForEach-Object { \$percentUsed = [math]::Round(((\$_.Size - \$_.FreeSpace) / \$_.Size) * 100, 1); Write-Host \"Drive \$(\$_.DeviceID) - Dispon√≠vel: \$([math]::Round(\$_.FreeSpace/1GB, 2))GB (\$percentUsed% usado)\" }" 2>/dev/null
        elif command -v wmic &> /dev/null; then
            wmic logicaldisk get size,freespace,caption | grep -E '^[A-Z]:' 2>/dev/null || echo "N√£o foi poss√≠vel obter informa√ß√µes de disco"
        else
            df -h . 2>/dev/null | tail -1 | awk '{print "Dispon√≠vel: " $4 " (" $5 " usado)"}' || echo "Informa√ß√µes de disco n√£o dispon√≠veis"
        fi
    else
        # Linux/macOS: usar df tradicional
        df -h / | tail -1 | awk '{print "Dispon√≠vel: " $4 " (" $5 " usado)"}'
    fi
    echo ""
}

# Fun√ß√£o do menu interativo
show_menu() {
    echo -e "${WHITE}üéØ ESCOLHA O TIPO DE LIMPEZA:${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo -e "${GREEN}1)${NC} üßΩ Limpeza B√°sica (containers parados, redes, imagens dangling)"
    echo -e "${YELLOW}2)${NC} üßº Limpeza Avan√ßada (+ volumes √≥rf√£os, todas imagens n√£o usadas)"
    echo -e "${RED}3)${NC} üî• Limpeza Total (REMOVE TUDO que n√£o est√° em uso)"
    echo -e "${BLUE}4)${NC} üìä Apenas mostrar an√°lise do sistema"
    echo -e "${CYAN}5)${NC} ‚ùå Sair"
    echo ""
    read -p "Digite sua op√ß√£o (1-5): " choice
}

# Fun√ß√£o principal
main() {
    # Detectar sistema operacional
    detect_os
    
    # Verificar se Docker est√° instalado
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker n√£o encontrado! Instale o Docker primeiro.${NC}"
        exit 1
    fi
    
    show_banner
    show_disk_usage
    count_resources
    
    while true; do
        show_menu
        
        case $choice in
            1)
                basic_cleanup
                show_final_report
                ;;
            2)
                basic_cleanup
                advanced_cleanup
                show_final_report
                ;;
            3)
                basic_cleanup
                advanced_cleanup
                total_cleanup
                show_final_report
                ;;
            4)
                show_disk_usage
                count_resources
                ;;
            5)
                echo -e "${CYAN}üëã Obrigado por usar o Docker Cleanup Pro!${NC}"
                echo -e "${WHITE}ü§ñ Criado por Matheus N√©voa - nevoaia.com // linkedin.com/in/matheusnevoa ${NC}"
                echo -e "${WHITE}üåü Se este script foi √∫til, compartilhe com seus amigos!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå Op√ß√£o inv√°lida! Tente novamente.${NC}"
                sleep 2
                ;;
        esac
        
        echo ""
        read -p "Pressione Enter para continuar..."
        clear_screen
        show_banner
    done
}

# Executar script
main
